//=============================================================================
// ■ FM::Stack
//-----------------------------------------------------------------------------
//   堆栈的类。所谓堆栈即先进后出（FIFO）的线性表。
//   这里还实现了operator[]，以便应用程序方便地从堆栈中查找数据。
//=============================================================================

template <class T, size_t size> class Stack {
	//-------------------------------------------------------------------------
	// ● 定义
	//-------------------------------------------------------------------------
	T data[size];
public:
	size_t count;
	//-------------------------------------------------------------------------
	// ● 初始化
	//-------------------------------------------------------------------------
	Stack() {
		count = 0;
	}
	//-------------------------------------------------------------------------
	// ● 压入
	//   返回的是压入元素的索引值。
	//-------------------------------------------------------------------------
	size_t push(T x) {
		data[count] = x;
		return count++;
	}
	//-------------------------------------------------------------------------
	// ● 弹出
	//-------------------------------------------------------------------------
	T pop() {
		count--;
		return data[count];
		// 并不需要从数组中删除，也无法删除
	}
	//-------------------------------------------------------------------------
	// ● 获取栈顶元素
	//-------------------------------------------------------------------------
	T peek() {
		return data[count - 1];
	}
	//-------------------------------------------------------------------------
	// ● 按索引获取和修改元素
	//-------------------------------------------------------------------------
	T& operator[](size_t index) {
		return data[index];
	}
	const T& operator[](size_t index) const {
		return data[index];
	}
};
