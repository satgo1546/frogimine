     1                                  [bits 32]
     2                                  
     3                                  ; Multiboot的头
     4                                  ; 参照Multiboot规范中“OS image format”一段：
     5                                  ; https://www.gnu.org/software/grub/manual/multiboot/multiboot.html#OS-image-format
     6                                  FLAGS equ 0b011 ; 对齐页面 + 提供memory map + 指定图像模式
     7                                  MULTIBOOT_MAGIC equ 0x1badb002 ; 魔法，参照Multiboot规范
     8                                  GRAPHICS_MODE equ 0 ; 线性图像模式（linear graphics mode）
     9                                  GRAPHICS_WIDTH equ 320 ; 分辨率（横向）
    10                                  GRAPHICS_HEIGHT equ 200 ; 分辨率（纵向）
    11                                  GRAPHICS_DEPTH equ 8 ; 色深
    12                                  section .multiboot
    13                                  align 4
    14 00000000 02B0AD1B                	dd MULTIBOOT_MAGIC
    15 00000004 03000000                	dd FLAGS
    16 00000008 FB4F52E4                	dd -(MULTIBOOT_MAGIC + FLAGS)
    17 0000000C 00000000<rept>          	times 5 dd 0
    18 00000020 00000000                	dd GRAPHICS_MODE
    19 00000024 40010000                	dd GRAPHICS_WIDTH
    20 00000028 C8000000                	dd GRAPHICS_HEIGHT
    21 0000002C 08000000                	dd GRAPHICS_DEPTH
    22                                  
    23                                  ; 分配堆栈所使用的空间
    24                                  section .bootstrap_stack, nobits
    25                                  align 4
    26                                  stack_bottom:
    27 00000000 <res 00004000>          resb 16384
    28                                  stack_top:
    29                                  
    30                                  ; 链接脚本指定了_start作为系统内核的入口点，所以引导程序在内核读完后会跳到这里
    31                                  ; 执行。此函数无需返回，因为引导程序没了。
    32                                  section .text
    33                                  global _start
    34                                  _start:
    35                                  	; ▼ 欢迎来到内核模式！
    36                                  	
    37                                  	; 创建自己的堆栈
    38 00000000 BC[00400000]            	mov esp, stack_top
    39                                  	
    40                                  	; 设置调色板
    41                                  	; 参照：http://wiki.osdev.org/VGA_Hardware#Port_0x3C8
    42 00000005 9C                      	pushfd
    43 00000006 FA                      	cli
    44 00000007 66BAC803                	mov dx, 0x03c8
    45 0000000B 30C0                    	xor al, al
    46 0000000D EE                      	out dx, al
    47 0000000E 6642                    	inc dx
    48                                  	%macro color 3
    49                                  		mov al, %1 >> 2
    50                                  		out dx, al
    51                                  		mov al, %2 >> 2
    52                                  		out dx, al
    53                                  		mov al, %3 >> 2
    54                                  		out dx, al
    55                                  	%endmacro
    56                                  	; 调色板数据
    57                                  	; 由于内部使用的是0~63数据范围，因此即使在这里指定得很精确也毫无作用。
    58                                  	; 在这里用0~255的范围仅是为了方便处理而使用。
    59                                  	; 0~16：HTML规定的标准16色、Windows cmd.exe默认颜色等。可参照：
    60                                  	; https://www.w3.org/TR/REC-html40/types.html#idx-color
    61                                  	color 0, 0, 0
    62 00000010 B000                <1>  mov al, %1 >> 2
    63 00000012 EE                  <1>  out dx, al
    64 00000013 B000                <1>  mov al, %2 >> 2
    65 00000015 EE                  <1>  out dx, al
    66 00000016 B000                <1>  mov al, %3 >> 2
    67 00000018 EE                  <1>  out dx, al
    68                                  	color 0, 0, 128
    69 00000019 B000                <1>  mov al, %1 >> 2
    70 0000001B EE                  <1>  out dx, al
    71 0000001C B000                <1>  mov al, %2 >> 2
    72 0000001E EE                  <1>  out dx, al
    73 0000001F B020                <1>  mov al, %3 >> 2
    74 00000021 EE                  <1>  out dx, al
    75                                  	color 0, 128, 0
    76 00000022 B000                <1>  mov al, %1 >> 2
    77 00000024 EE                  <1>  out dx, al
    78 00000025 B020                <1>  mov al, %2 >> 2
    79 00000027 EE                  <1>  out dx, al
    80 00000028 B000                <1>  mov al, %3 >> 2
    81 0000002A EE                  <1>  out dx, al
    82                                  	color 0, 128, 128
    83 0000002B B000                <1>  mov al, %1 >> 2
    84 0000002D EE                  <1>  out dx, al
    85 0000002E B020                <1>  mov al, %2 >> 2
    86 00000030 EE                  <1>  out dx, al
    87 00000031 B020                <1>  mov al, %3 >> 2
    88 00000033 EE                  <1>  out dx, al
    89                                  	color 128, 0, 0
    90 00000034 B020                <1>  mov al, %1 >> 2
    91 00000036 EE                  <1>  out dx, al
    92 00000037 B000                <1>  mov al, %2 >> 2
    93 00000039 EE                  <1>  out dx, al
    94 0000003A B000                <1>  mov al, %3 >> 2
    95 0000003C EE                  <1>  out dx, al
    96                                  	color 128, 0, 128
    97 0000003D B020                <1>  mov al, %1 >> 2
    98 0000003F EE                  <1>  out dx, al
    99 00000040 B000                <1>  mov al, %2 >> 2
   100 00000042 EE                  <1>  out dx, al
   101 00000043 B020                <1>  mov al, %3 >> 2
   102 00000045 EE                  <1>  out dx, al
   103                                  	color 128, 128, 0
   104 00000046 B020                <1>  mov al, %1 >> 2
   105 00000048 EE                  <1>  out dx, al
   106 00000049 B020                <1>  mov al, %2 >> 2
   107 0000004B EE                  <1>  out dx, al
   108 0000004C B000                <1>  mov al, %3 >> 2
   109 0000004E EE                  <1>  out dx, al
   110                                  	color 192, 192, 192
   111 0000004F B030                <1>  mov al, %1 >> 2
   112 00000051 EE                  <1>  out dx, al
   113 00000052 B030                <1>  mov al, %2 >> 2
   114 00000054 EE                  <1>  out dx, al
   115 00000055 B030                <1>  mov al, %3 >> 2
   116 00000057 EE                  <1>  out dx, al
   117                                  	color 128, 128, 128
   118 00000058 B020                <1>  mov al, %1 >> 2
   119 0000005A EE                  <1>  out dx, al
   120 0000005B B020                <1>  mov al, %2 >> 2
   121 0000005D EE                  <1>  out dx, al
   122 0000005E B020                <1>  mov al, %3 >> 2
   123 00000060 EE                  <1>  out dx, al
   124                                  	color 0, 0, 255
   125 00000061 B000                <1>  mov al, %1 >> 2
   126 00000063 EE                  <1>  out dx, al
   127 00000064 B000                <1>  mov al, %2 >> 2
   128 00000066 EE                  <1>  out dx, al
   129 00000067 B03F                <1>  mov al, %3 >> 2
   130 00000069 EE                  <1>  out dx, al
   131                                  	color 0, 255, 0
   132 0000006A B000                <1>  mov al, %1 >> 2
   133 0000006C EE                  <1>  out dx, al
   134 0000006D B03F                <1>  mov al, %2 >> 2
   135 0000006F EE                  <1>  out dx, al
   136 00000070 B000                <1>  mov al, %3 >> 2
   137 00000072 EE                  <1>  out dx, al
   138                                  	color 0, 255, 255
   139 00000073 B000                <1>  mov al, %1 >> 2
   140 00000075 EE                  <1>  out dx, al
   141 00000076 B03F                <1>  mov al, %2 >> 2
   142 00000078 EE                  <1>  out dx, al
   143 00000079 B03F                <1>  mov al, %3 >> 2
   144 0000007B EE                  <1>  out dx, al
   145                                  	color 255, 0, 0
   146 0000007C B03F                <1>  mov al, %1 >> 2
   147 0000007E EE                  <1>  out dx, al
   148 0000007F B000                <1>  mov al, %2 >> 2
   149 00000081 EE                  <1>  out dx, al
   150 00000082 B000                <1>  mov al, %3 >> 2
   151 00000084 EE                  <1>  out dx, al
   152                                  	color 255, 0, 255
   153 00000085 B03F                <1>  mov al, %1 >> 2
   154 00000087 EE                  <1>  out dx, al
   155 00000088 B000                <1>  mov al, %2 >> 2
   156 0000008A EE                  <1>  out dx, al
   157 0000008B B03F                <1>  mov al, %3 >> 2
   158 0000008D EE                  <1>  out dx, al
   159                                  	color 255, 255, 0
   160 0000008E B03F                <1>  mov al, %1 >> 2
   161 00000090 EE                  <1>  out dx, al
   162 00000091 B03F                <1>  mov al, %2 >> 2
   163 00000093 EE                  <1>  out dx, al
   164 00000094 B000                <1>  mov al, %3 >> 2
   165 00000096 EE                  <1>  out dx, al
   166                                  	color 255, 255, 255
   167 00000097 B03F                <1>  mov al, %1 >> 2
   168 00000099 EE                  <1>  out dx, al
   169 0000009A B03F                <1>  mov al, %2 >> 2
   170 0000009C EE                  <1>  out dx, al
   171 0000009D B03F                <1>  mov al, %3 >> 2
   172 0000009F EE                  <1>  out dx, al
   173                                  	%unmacro color 3
   174 000000A0 9D                      	popfd
   175                                  	
   176                                  	; 调用系统内核的主程序
   177                                  	extern kernel_main
   178 000000A1 E8(00000000)            	call kernel_main
   179                                  	
   180                                  	; 当内核主程序返回后，就让电脑进入死循环
   181                                  	; 禁用中断
   182 000000A6 FA                      	cli
   183                                  .loop:
   184                                  	; 等待到下一次中断来临
   185 000000A7 F4                      	hlt
   186 000000A8 EBFD                    	jmp .loop
